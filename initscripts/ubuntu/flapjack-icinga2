#!/bin/sh
### BEGIN INIT INFO
# Provides:          flapjack-icinga2
# Required-Start:    $local_fs $network $syslog
# Required-Stop:     $local_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Agent to publish Icinga 2 events into Flapjack
# Description:       Sends events to Flapjack from Icinga 2: https://github.com/sol1/flapjack-icinga2
### END INIT INFO

# Do NOT "set -e"
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Agent to publish Icinga 2 events into Flapjack"
NAME="flapjack-icinga2"
PIDDIR=/var/run/flapjack-icinga2
PIDFILE=/var/run/flapjack-icinga2/flapjack-icinga2.pid
LOGFILE=/var/log/flapjack-icinga2/flapjack-icinga2.log
CONFIG=/etc/flapjack-icinga2/flapjack-icinga2.conf

## Read the config file
# Check for existence of needed config file and read it
test -r $CONFIG && . $CONFIG || { echo "$CONFIG not existing";
        if [ "$1" = "stop" ]; then exit 0;
        else exit 6; fi; }

## Create pid directory
test -r $PIDDIR || { echo "$PIDDIR created";
     mkdir /var/run/flapjack-icinga2; }

#build command
SCRIPT="$binary --icinga-url=$icinga2_server --icinga-user=$icinga_user --icinga-password=$icinga_password --redis-url=$redis_server"

start() {
  if [ -f /var/run/$PIDNAME ] && kill -0 $(cat /var/run/$PIDNAME); then
    echo 'Service already running' >&2
    return 1
  fi
  echo 'Starting service…' >&2
  local CMD="$SCRIPT &> \"$LOGFILE\" & echo \$!"
  su -c "$CMD" $user > "$PIDFILE"
  echo 'Service started' >&2
}

stop() {
  if [ ! -f "$PIDFILE" ] || ! kill -0 $(cat "$PIDFILE"); then
    echo 'Service not running' >&2
    return 1
  fi
  echo 'Stopping service…' >&2
  kill -15 $(cat "$PIDFILE") && rm -f "$PIDFILE"
  echo 'Service stopped' >&2
}

status() {
        printf "%-50s" "Checking $NAME..."
    if [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
            if [ -z "$(ps axf | grep ${PID} | grep -v grep)" ]; then
                printf "%s\n" "The process appears to be dead but pidfile still exists"
            else    
                echo "Running, the PID is $PID"
            fi
    else
        printf "%s\n" "Service not running"
    fi
}


case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
esac
